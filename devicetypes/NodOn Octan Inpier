/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * ===== Nodon Octan =====
 * 	
 *	Modified for NodOn Octan Remote (CRC-3-1-0x) by Richard_Woodward
 *
 *	Octan supports 4 actions per button	Pushed
 *										Double Tap
 *										Held
 *										Hold Released
 *
 *	v1.01 Updated to support all 16 actions:
 *  
 *  As Smartlighting can only support type "Pushed" or "Hold" events the extra 4 functions have been mapped to 
 *  fictional buttons 5 through 8.
 *
 *  Button 1 double Tap is mapped to   "Button 5 Pushed" in smartlighting
 *  Button 1 Hold Release is mapped to "Button 5 Hold"   in smarlighting
 *  .
 *  Button 4 double Tap is mapped to   "Button 8 Pushed" in Smartlighting
 *  Button 4 Hold Rlease is mapped to  "Button 8 Hold"   in Smartlighting
 *
 */
metadata {
	definition (name: "NodOn Octan Inpier", namespace: "Inpier", author: "Kevin P") {
		capability "Actuator"
		capability "Button"
		capability "Holdable Button"
		capability "Configuration"
		capability "Sensor"
		capability "Battery"

		attribute "buttonNumber", "STRING"
		attribute "lblPush1", "STRING"
        attribute "lblHold1", "STRING"
        attribute "lblPush2", "STRING"
        attribute "lblHold2", "STRING"
        attribute "lblPush3", "STRING"
        attribute "lblHold3", "STRING"
        attribute "lblPush4", "STRING"
        attribute "lblHold4", "STRING"
        attribute "lblHoldRel1", "STRING"
        attribute "lblDblTap1", "STRING"
        attribute "lblHoldRel2", "STRING"
        attribute "lblDblTap2", "STRING"
        attribute "lblHoldRel3", "STRING"
        attribute "lblDblTap3", "STRING"
        attribute "lblHoldRel4", "STRING"
        attribute "lblDblTap4", "STRING"
        
		command "pushed"
        command "held"
        command "pushed", [int]
        command "held", [int]
        command "push1"
        command "hold1"
        command "holdrel1"
        command "dbltap1"
        command "push2"
        command "hold2"
        command "holdrel2"
        command "dbltap2"
        command "push3"
        command "hold3"
        command "holdrel3"
        command "dbltap3"
        command "push4"
        command "hold4"
        command "holdrel4"
        command "dbltap4"

		fingerprint deviceId: "0x0101", inClusters: "0x86,0x72,0x70,0x80,0x84,0x85"
	}

	simulator {
		status "button 1 pushed":  "command: 2001, payload: 01"
		status "button 1 held":  "command: 2001, payload: 15"
		status "button 2 pushed":  "command: 2001, payload: 29"
		status "button 2 held":  "command: 2001, payload: 3D"
		status "button 3 pushed":  "command: 2001, payload: 51"
		status "button 3 held":  "command: 2001, payload: 65"
		status "button 4 pushed":  "command: 2001, payload: 79"
		status "button 4 held":  "command: 2001, payload: 8D"
		status "wakeup":  "command: 8407, payload: "
	}

      preferences {
    	section ("Labels") {
            input("lblPush1", "text", title: "Label for Button 1 Push?", required: false, displayDuringSetup: false, defaultValue: "Push 1", description: "Label for the first push button.")  
            input("lblHold1", "text", title: "Label for Button 1 Hold?", required: false, displayDuringSetup: false, defaultValue: "Hold 1", description: "Label for the second hold button.")  
            input("lblPush2", "text", title: "Label for Button 2 Push?", required: false, displayDuringSetup: false, defaultValue: "Push 2", description: "Label for the third push button.")  
            input("lblHold2", "text", title: "Label for Button 2 Hold?", required: false, displayDuringSetup: false, defaultValue: "Hold 2", description: "Label for the fourth hold button.")  
            input("lblPush3", "text", title: "Label for Button 3 Push?", required: false, displayDuringSetup: false, defaultValue: "Push 3", description: "Label for the first push button.")  
            input("lblHold3", "text", title: "Label for Button 3 Hold?", required: false, displayDuringSetup: false, defaultValue: "Hold 3", description: "Label for the second hold button.")  
            input("lblPush4", "text", title: "Label for Button 4 Push?", required: false, displayDuringSetup: false, defaultValue: "Push 4", description: "Label for the third push button.")  
            input("lblHold4", "text", title: "Label for Button 4 Hold?", required: false, displayDuringSetup: false, defaultValue: "Hold 4", description: "Label for the fourth hold button.")  

			input("lblHoldRel1", "text", title: "Label for Button 1 HoldRel?", required: false, displayDuringSetup: false, defaultValue: "HoldRel 1", description: "Label for the first HoldRel button.")  
            input("lblDblTap1", "text", title: "Label for Button 1 DblTap?", required: false, displayDuringSetup: false, defaultValue: "DblTap 1", description: "Label for the second DblTap button.")  
            input("lblHoldRel2", "text", title: "Label for Button 2 HoldRel?", required: false, displayDuringSetup: false, defaultValue: "HoldRel 2", description: "Label for the third HoldRel button.")  
            input("lblDblTap2", "text", title: "Label for Button 2 DblTap?", required: false, displayDuringSetup: false, defaultValue: "DblTap 2", description: "Label for the fourth DblTap button.")  
            input("lblHoldRel3", "text", title: "Label for Button 3 HoldRel?", required: false, displayDuringSetup: false, defaultValue: "HoldRel 3", description: "Label for the first HoldRel button.")  
            input("lblDblTap3", "text", title: "Label for Button 3 DblTap?", required: false, displayDuringSetup: false, defaultValue: "DblTap 3", description: "Label for the second DblTap button.")  
            input("lblHoldRel4", "text", title: "Label for Button 4 HoldRel?", required: false, displayDuringSetup: false, defaultValue: "HoldRel 4", description: "Label for the third HoldRel button.")  
            input("lblDblTap4", "text", title: "Label for Button 4 DblTap?", required: false, displayDuringSetup: false, defaultValue: "DblTap 4", description: "Label for the fourth DblTap button.")  



		}
    }
 
	tiles (scale: 2) {
    /*
    standardTile("blank", "blank", width: 2, height: 2) {
            	state("default", backgroundColor: "#ffffff")
            }
        standardTile("HeaderPush", "blank", width: 2, height: 2) {
            	state("default",label: 'Push Button ', backgroundColor: "#ffffff")
            }
         standardTile("HeaderHold", "blank", width: 2, height: 2) {
            	state("default",label: 'Hold Button ', backgroundColor: "#ffffff")
            }
         standardTile("HeaderHoldRel", "blank", width: 2, height: 2) {
            	state("default",label: 'Hold Release', backgroundColor: "#ffffff")
            }   
         standardTile("HeaderDblTap", "blank", width: 2, height: 2) {
            	state("default",label: 'Double Tap', backgroundColor: "#ffffff")
            }
         standardTile("blank", "blank", width: 2, height: 2) {
            	state("default", backgroundColor: "#ffffff")
            }
                   tileList << "blank"
        tileList << "HeaderPush"
        tileList << "HeaderHold"
        tileList << "HeaderHoldRel"
        tileList << "HeaderDblTap"
        tileList << "blank"
        */
        def tileList = []
 
    	(1..4).each { btn ->
        	def index = btn * 6 - 6
           //log.debug "Index $index"
            tileList << "vButton${btn}Label".toString()
        	tileList << "vButton${btn}Push".toString()
            tileList << "vButton${btn}Hold".toString()
            tileList << "vButton${btn}HoldRel".toString()
            tileList << "vButton${btn}DblTap".toString()
            tileList << "vButton${btn}Label".toString()
            //tileList << "vButton${btn}blank".toString()
            standardTile(tileList[index], "device.button", width: 2, height: 2) {
            	state("default", label: "Button ${btn}", defaultState: true, backgroundColor: "#ffffff", icon: 'st.unknown.zwave.remote-controller', decoration: "flat", canChangeIcon: true, canChangeBackground: true)
            }
        	valueTile(tileList[index + 1], "device.lblPush${btn}", width: 2, height: 2) {
				state("default", label: '${currentValue}', action: "push${btn}", defaultState: true, backgroundColor: "#33cc33", canChangeIcon: true, canChangeBackground: true)
            }
            valueTile(tileList[index + 2], "device.lblHold${btn}", width: 2, height: 2) {
            	state("default", label: '${currentValue}', action: "hold${btn}", defaultState: true, backgroundColor: "#3399ff", canChangeIcon: true, canChangeBackground: true) 
            }
            
            valueTile(tileList[index + 3], "device.lblHoldRel${btn}", width: 2, height: 2) {
            	state("default", label: '${currentValue}', action: "holdrel${btn}", defaultState: true, backgroundColor: "#3399ff", canChangeIcon: true, canChangeBackground: true) 
            }
            valueTile(tileList[index + 4], "device.lblDblTap${btn}", width: 2, height: 2) {
            	state("default", label: '${currentValue}', action: "dbltap${btn}", defaultState: true, backgroundColor: "#3399ff", canChangeIcon: true, canChangeBackground: true) 
            }
            valueTile(tileList[index + 5], "blank", width: 2, height: 2) {
            	state("default",  backgroundColor: "#ffffff") 
            }
             
		}
        tileList << "configure"
    	
        standardTile("configure", "device.configure", inactiveLabel: false, decoration: "flat") {
      		state "configure", label: '', action:"configuration.configure", icon:"st.secondary.configure"
    	}
        
            
        main(tileList.take(1))
		details(tileList)
	}
}

def installed() {
	initLabels()
   
}

def updated() {
	initLabels()
     initialize()
 }

def initLabels() {
    (1..4).each { button ->
    	["Push","Hold","HoldRel","DblTap"].each { action ->
           	def descriptionText = "Updating button ${button} ${action}"
            def settingName = "lbl${action}${button}"
            log.debug descriptionText + ": ${settings[settingName]}"
			sendEvent(name: "lbl${action}${button}", value: "${settings[settingName]}", descriptionText: descriptionText, isStateChange: true, displayed: false)
		}
    }
}


def parse(String description) {
	def results = []
	if (description.startsWith("Err")) {
	    results = createEvent(descriptionText:description, displayed:true)
	} else {
		def cmd = zwave.parse(description, [0x80: 1, 0x84: 1])
        //log.debug("cmd=$cmd")
		if(cmd) results += zwaveEvent(cmd)
		if(!results) results = [ descriptionText: cmd, displayed: false ]
	}
	//log.debug("Parsed '$description' to $cmd")
	return results
}

def zwaveEvent(physicalgraph.zwave.commands.wakeupv1.WakeUpNotification cmd) {
	def results = [createEvent(descriptionText: "$device.displayName woke up", isStateChange: false)]

	def prevBattery = device.currentState("battery")
	if (!prevBattery || (new Date().time - prevBattery.date.time)/60000 >= 60 * 53) {
		results << response(zwave.batteryV1.batteryGet().format())
        log.debug("  read battery")
	}
	results += configurationCmds().collect{ response(it) }
	results << response(zwave.wakeUpV1.wakeUpNoMoreInformation().format())
	return results
}

def buttonEvent(button, held) {
	// Leaving value as pushed or held to stay compatible with Buton Controller Smart App for now.
	button = button as Integer
    held = held as Integer
	
        switch (held) {
		 	case  "1":
            	button = button +4
      			createEvent(name: "button", value: "held", data: [buttonNumber: button, action: (held ? "held" : "pushed")], source: "DEVICE", descriptionText: "$device.displayName button $button was held", isStateChange: true)
               log.info "$button was pushed:"
               sendEvent(name: "buttonNumber", value: "$button")
            break
        	case  "0":
            	createEvent(name: "button", value: "pushed", data: [buttonNumber: button ], source: "DEVICE", descriptionText: "$device.displayName button $button was pushed", isStateChange: true)
               log.info "$button was pushed:" 
                sendEvent(name: "buttonNumber", value: "$button")
      		break
            case  "2":
            	button = button +8
                createEvent(name: "button", value: "pushed", data: [buttonNumber: button ], source: "DEVICE", descriptionText: "$device.displayName button $button was pushed", isStateChange: true)
                log.info "$button was pushed:"
                sendEvent(name: "buttonNumber", value: "$button")
      		break
            case  "3":
            	button = button +12
                createEvent(name: "button", value: "pushed", data: [buttonNumber: button ], source: "DEVICE", descriptionText: "$device.displayName button $button was pushed", isStateChange: true)
                log.info "$button was pushed:"
                sendEvent(name: "buttonNumber", value: "$button")
      		break
        }
       sendEvent(name: "button", value: "pushed", data: [buttonNumber: button, action: "pushed"], source: "COMMAND", descriptionText: "$device.displayName button $button was pushed", isStateChange: true)
     
}

def zwaveEvent(physicalgraph.zwave.commands.sceneactivationv1.SceneActivationSet cmd) {
	Integer button = (cmd.sceneId / 10) as Integer
    Integer held = cmd.sceneId - (button*10) as Integer
   //log.debug "Button:$button Held:$held"
    buttonEvent(button, held)
}


def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
	def map = [ name: "battery", unit: "%" ]
	if (cmd.batteryLevel == 0xFF) {
		map.value = 1
		map.descriptionText = "${device.displayName} has a low battery"
	} else {
		map.value = cmd.batteryLevel
	}
	createEvent(map)
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	[ descriptionText: "$device.displayName: $cmd", linkText:device.displayName, displayed: false ]
}

def configurationCmds() {
	delayBetween([ zwave.configurationV1.configurationSet(parameterNumber: 250, scaledConfigurationValue: 1).format(),
   // zwave.associationV1.associationSet(groupingIdentifier: 2, nodeId: zwaveHubNodeId).format(),
   // zwave.associationV1.associationSet(groupingIdentifier: 3, nodeId: zwaveHubNodeId).format(),
  //  zwave.associationV1.associationSet(groupingIdentifier: 4, nodeId: zwaveHubNodeId).format(),
   // zwave.associationV1.associationSet(groupingIdentifier: 5, nodeId: zwaveHubNodeId).format(),
    zwave.configurationV1.configurationSet(configurationValue: [1], parameterNumber: 3, size: 1).format(),
    zwave.configurationV1.configurationSet(configurationValue: [3], parameterNumber: 8, size: 1).format(),
	  zwave.associationV1.associationSet(groupingIdentifier:1, nodeId:zwaveHubNodeId).format() ],500)
}

def configure() {
	def cmd = configurationCmds()
	//log.debug("Sending configuration: $cmd")
	return cmd
}




def initialize() {
	sendEvent(name: "numberOfButtons", value: 16)
    log.debug("Sent numberOfButtons 16")
}
def push1() {
	pushed(1)
    log.debug "inpier Button $button was Pushed"
}

def push2() {
	pushed(2)
}

def push3() {
	pushed(3)
}

def push4() {
	pushed(4)
}

def pushed(button) {
    sendEvent(name: "button", value: "pushed", data: [buttonNumber: button, action: "pushed"], source: "COMMAND", descriptionText: "$device.displayName button $button was pushed", isStateChange: true)
 sendEvent(name: "buttonNumber", value: "$button")
log.debug "App Button $button was Pushed"
}

def hold1() {
	held(5)
}

def hold2() {
	held(6)
}

def hold3() {
	held(7)
}

def hold4() {
	held(8)
}

def held(button) {
    sendEvent(name: "button", value: "pushed", data: [buttonNumber: button, action: "held"], source: "COMMAND", descriptionText: "$device.displayName button $button was held", isStateChange: true)
log.debug "App Button $button was Pushed"
}

def holdrel1() {
	heldrel(9)
}

def holdrel2() {
	heldrel(10)
}


def holdrel3() {
	heldrel(11)
}

def holdrel4() {
	heldrel(12)
}


def heldrel(button) {
    sendEvent(name: "button", value: "pushed", data: [buttonNumber: button, action: "held"], source: "COMMAND", descriptionText: "$device.displayName button $button was held", isStateChange: true)
log.debug "App Button $button was Pushed"
}

def dbltap1() {
	doubletap(13)
}

def dbltap2() {
	doubletap(14)
}


def dbltap3() {
	doubletap(15)
}

def dbltap4() {
	doubletap(16)
}

def doubletap(button) {
    sendEvent(name: "button", value: "pushed", data: [buttonNumber: button, action: "held"], source: "COMMAND", descriptionText: "$device.displayName button $button was held", isStateChange: true)
log.debug "App Button $button was Pushed"
}
